# -*- python -*-
# ex: set syntax=python:
# vim: ft=python

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import sys
import os
from os import path

# Import config and support modules, reload to capture changes on 'reconfig'
import buildbot_configuration
reload(buildbot_configuration)

import test_support
reload(test_support)

import build_support
reload(build_support)

import buildbot_build_steps
reload(buildbot_build_steps)

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from buildbot_configuration import slave_list

c['slaves'] = [BuildSlave(s["name"], "dev", **s["args"]) for s in slave_list]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller

from buildbot_configuration import build_environments, all_target_branches
from buildbot_configuration import master_repo_url

c['change_source'] = []
c['change_source'].append(GitPoller(
        master_repo_url,
        workdir='gitpoller_main', branches=all_target_branches))

####### GLOBAL SCHEDULER

# MergeRequests configuration to merge changes on the same branch.
def mergeRequests(builder, req1, req2):
    "Any requests with the same branch can be merged."
    return req1.source.branch == req2.source.branch
c['mergeRequests'] = mergeRequests

####### Setup individual build environments
#Scheduler imports
from buildbot.schedulers.basic import AnyBranchScheduler, SingleBranchScheduler
from buildbot.schedulers import triggerable
from buildbot.schedulers.forcesched import ForceScheduler, StringParameter, ChoiceStringParameter, BooleanParameter, FixedParameter
from buildbot.changes import filter

#Build factory imports
from buildbot.config import BuilderConfig
from buildbot_build_steps import (  complete_full_factory,
                                    complete_without_bindings_factory,
                                    build_and_deploy_full_factory,
                                    build_and_deploy_without_bindings_factory )
# Clear configuration state
c['schedulers'] = []
c['builders'] = []

def configure_environment(name, target_slaves, target_builds, target_branches, integration_result_dir, build_result_dir, build_bindings):
    """Setup schedulers and builders for the given environment."""

    def env_namespaced(buildname):
        return buildname + "@" + name

    ####### SCHEDULERS
    # Setup target branch watch scheduler and force scheduler
    for b, config in target_branches.items():
        for build_type in target_builds:
            build_name = env_namespaced("%s_%s" % (b, build_type))

            c['schedulers'].append(SingleBranchScheduler(
                                  name=build_name,
                                  change_filter=filter.ChangeFilter(branch=b),
                                  treeStableTimer=10,
                                  builderNames=[build_name],
                                  properties = {
                                    "build_extras" : config.get("extras", ""),
                                    "build_targets" : config.get("targets", "bin"),
                                    "integration_result_dir" : integration_result_dir
                                  }))

            c['schedulers'].append(ForceScheduler(
                                  name= "force_%s" % build_name,
                                  branch=FixedParameter(name="branch", default=b),
                                  project=FixedParameter(name="project", default=""),
                                  repository=FixedParameter(name="repository", default=""),
                                  builderNames=[build_name],
                                  properties = [
                                    FixedParameter(name="build_extras", default=config.get("extras", "")),
                                    FixedParameter(name="build_targets", default=config.get("targets", "bin")),
                                    FixedParameter(name="integration_result_dir", default=integration_result_dir)]
                                  ))


    # Setup deployment schedulers

    # Scheduler performs deployment for any change in the "release" category
    c['schedulers'].append(AnyBranchScheduler(
            name=env_namespaced("release"),
            change_filter=filter.ChangeFilter(category="release"),
            treeStableTimer=10,
            builderNames=[ env_namespaced("build_and_deploy_without_bindings" if build_bindings else "build_and_deploy") ],
            properties = {
                "build_mode" : "release",
                "build_extras" : "",
                "build_targets" : "bin",
                "force_build_clean" : True,
                "build_result_dir" : build_result_dir,
                "integration_result_dir" : integration_result_dir,
              }
            ))

    c['schedulers'].append(ForceScheduler(
                           name=env_namespaced("build_and_deploy"),
                           builderNames=[env_namespaced("build_and_deploy")],
                           properties=[
                             ChoiceStringParameter(
                               name="build_mode",
                               label="build_mode:<br>",
                               choices=["release","debug", "release_debug"], default="release"),
                             StringParameter(
                               name="build_extras",
                               label="build_extras:<br>",
                               default="", size=80),
                             StringParameter(
                               name="build_targets",
                               label="build targets:<br>",
                               default="bin", size=80),
                             BooleanParameter(
                               name="force_build_clean",
                               label="Clean build directory before building.",
                               default=True),
                             StringParameter(
                               name="integration_result_dir",
                               label="Integration test drop directory:<br>",
                               default=integration_result_dir, size=120),
                             StringParameter(
                               name="build_result_dir",
                               label="build drop directory:<br>",
                               default=build_result_dir, size=120)
                            ]))
    
    # If bindings are requested, add an additional build job to build without bindings
    if build_bindings:
        c['schedulers'].append(ForceScheduler(
                             name=env_namespaced("build_and_deploy_without_bindings"),
                             builderNames=[env_namespaced("build_and_deploy_without_bindings")],
                             properties=[
                               ChoiceStringParameter(
                                 name="build_mode",
                                 label="build_mode:<br>",
                                 choices=["release","debug", "release_debug"], default="release"),
                               StringParameter(
                                 name="build_extras",
                                 label="build_extras:<br>",
                                 default="", size=80),
                               StringParameter(
                                 name="build_targets",
                                 label="build targets:<br>",
                                 default="bin", size=80),
                               BooleanParameter(
                                 name="force_build_clean",
                                 label="Clean build directory before building.",
                                 default=True),
                               StringParameter(
                                 name="integration_result_dir",
                                 label="Integration test drop directory:<br>",
                                 default=integration_result_dir, size=120),
                               StringParameter(
                                 name="build_result_dir",
                                 label="build drop directory:<br>",
                                 default=build_result_dir, size=120)
                              ]))

    ####### BUILDERS
    # The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
    # what steps, and which slaves can execute them.
    # 
    # Setup builds for each target branch in the environment

    if build_bindings:
        complete_factory = complete_full_factory
        build_and_deploy_factory = build_and_deploy_full_factory
    else:
        complete_factory = complete_without_bindings_factory
        build_and_deploy_factory = build_and_deploy_full_factory

    for build_type in target_builds:
        for branch in target_branches.keys():
            build_name = env_namespaced("%s_%s" % (branch, build_type))

            c['builders'].append(
                BuilderConfig(
                  name=build_name,
                  slavenames=target_slaves,
                  slavebuilddir = build_name,
                  factory = complete_factory,
                  properties={"build_mode" : build_type, "build_name" : build_name }))
    
    #c['builders'].append(
        #BuilderConfig(
            #name="%s_build_manual" % name,
            #slavenames=target_slaves,
            #factory=complete_factory))
    
    c['builders'].append(
        BuilderConfig(
            name=env_namespaced("build_and_deploy"),
            slavenames=target_slaves,
            factory=build_and_deploy_factory))
    
    if build_bindings:
        c['builders'].append(
            BuilderConfig(
                name=env_namespaced("build_and_deploy_without_bindings"),
                slavenames=target_slaves,
                factory=build_and_deploy_without_bindings_factory))

from buildbot_configuration import default_build_environment, build_environments

for envname, env in build_environments.items():
    configure_environment(envname, **env)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.mail import MailNotifier

mn = MailNotifier(fromaddr="fordas@uw.edu", sendToInterestedUsers=False, extraRecipients=['fordas@uw.edu'])
c["status"].append(mn)

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("fordas","dev")]),
    gracefulShutdown = True,
    forceBuild = 'full_build', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)

c['status'].append(
        html.WebStatus(
            http_port=8010,
            authz=authz_cfg,
            order_console_by_time=True,
            change_hook_dialects={ 'base': True }
        ))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "BakerLab RosettaCommons/main"
c['titleURL'] = "https://github.com/RosettaCommons/main"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

import socket

c['buildbotURL'] = "http://buildbot0:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
