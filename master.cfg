# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("example-slave", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

target_branches = ["master", "pyrosetta_numeric", "pyrosetta_protocols", "pyrosetta_fragment_matching"]

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'file:///work/fordas/workspace/rosetta_dev',
        workdir='gitpoller_rosetta_dev', branches=target_branches,
        pollinterval=60))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
                            name="test_builder",
                            change_filter=filter.ChangeFilter(branch_fn=lambda b: b in target_branches),
                            treeStableTimer=None,
                            builderNames=["build_test"]))

c['schedulers'].append(ForceScheduler(
                            name="force_build_test",
                            builderNames=["build_test"]))

c['schedulers'].append(AnyBranchScheduler(
                            name="test_debug_builder",
                            change_filter=filter.ChangeFilter(branch_fn=lambda b: b in target_branches),
                            treeStableTimer=None,
                            builderNames=["build_test_debug"]))

c['schedulers'].append(ForceScheduler(
                            name="force_build_test_debug",
                            builderNames=["build_test_debug"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.process.properties import WithProperties
from buildbot.process.properties import Interpolate


release_factory = BuildFactory()
# check out the source
#release_factory.addStep(Git(repourl='file:///work/fordas/workspace/rosetta_dev', mode='incremental', branch='master'))
#release_factory.addStep(ShellCommand(command=["scons", "-j", "20", "mode=release"], workdir="build/source", description="compiling", descriptionSuffix="release"))
#release_factory.addStep(ShellCommand(command=["scons", "-j", "20", "mode=release", "extras=static"], workdir="build/source", description="compiling", descriptionSuffix="static"))
#release_factory.addStep(ShellCommand(command=["scons", "-j", "20", "mode=release", "extras=mpi"], workdir="build/source", description="compiling", descriptionSuffix="mpi"))

from test_support import UnitTestStep

test_factory = BuildFactory()
# check out the source
test_factory.addStep(
    Git(
      repourl='file:///work/fordas/workspace/rosetta_dev', mode='incremental', branch=Interpolate("%(src::branch)s"),
      workdir=Interpolate("build_%(src::branch)s")
      ))

# Insert build options into sconscript
test_factory.addStep(
    ShellCommand(
      command='echo "SetOption(\'implicit_cache\', 1);Decider(\'MD5-timestamp\')" >> SConscript',
      workdir=Interpolate("build_%(src::branch)s/source"),
      haltOnFailure=True,
      description="configure", descriptionSuffix="SConscript"))

# build for unit tests
test_factory.addStep(
    ShellCommand(
      command=["scons", "-j", "20", "mode=release"],
      workdir=Interpolate("build_%(src::branch)s/source"),
      haltOnFailure=True,
      description="compiling", descriptionSuffix="release"))

test_factory.addStep(
    ShellCommand(
      command=["scons", "-j", "20", "mode=release", "cat=test"],
      workdir=Interpolate("build_%(src::branch)s/source"),
      haltOnFailure=True,
      description="compiling", descriptionSuffix="tests"))

test_factory.addStep(
    UnitTestStep(
      workdir=Interpolate("build_%(src::branch)s/source"),
      verbose=True, build_mode="release", jobs=20,
      haltOnFailure=True,
      description="testing", descriptionSuffix="unit"))

test_factory.addStep(
    ShellCommand(
      command=["scons", "-j", "20", "mode=release", "bin"],
      workdir=Interpolate("build_%(src::branch)s/source"),
      description="compiling", descriptionSuffix="release bin"))

test_factory.addStep(
    ShellCommand(
      command=["./integration.py", "-j", "20", "--mode", "release"],
      workdir=Interpolate("build_%(src::branch)s/tests/integration"),
      description="testing", descriptionSuffix="integration"))

test_factory.addStep(
    ShellCommand(
      command=["mv", "-f", Interpolate("../build_%(src::branch)s/tests/integration/ref"), Interpolate("ref_%(src::branch)s_%(src::revision)s")],
      workdir="integration_results", description="saving", descriptionSuffix="integration"))


test_debug_factory = BuildFactory()
# check out the source
test_debug_factory.addStep(
    Git(
      repourl='file:///work/fordas/workspace/rosetta_dev', mode='incremental', branch=Interpolate("%(src::branch)s"),
      workdir=Interpolate("build_%(src::branch)s")
      ))

test_debug_factory.addStep(
    ShellCommand(
      command='echo "SetOption(\'implicit_cache\', 1);Decider(\'MD5-timestamp\')" >> SConscript',
      workdir=Interpolate("build_%(src::branch)s/source"),
      haltOnFailure=True,
      description="configure", descriptionSuffix="SConscript"))

# build for unit tests
test_debug_factory.addStep(
    ShellCommand(
      command=["scons", "-j", "20", "mode=debug"],
      workdir=Interpolate("build_%(src::branch)s/source"),
      haltOnFailure=True,
      description="compiling", descriptionSuffix="debug"))

test_debug_factory.addStep(
    ShellCommand(
      command=["scons", "-j", "20", "mode=debug", "cat=test"],
      workdir=Interpolate("build_%(src::branch)s/source"),
      haltOnFailure=True,
      description="compiling", descriptionSuffix="tests"))

test_debug_factory.addStep(
    UnitTestStep(
      workdir=Interpolate("build_%(src::branch)s/source"),
      verbose=True, build_mode="debug", jobs=20,
      haltOnFailure=True,
      description="testing", descriptionSuffix="unit"))

test_debug_factory.addStep(
    ShellCommand(
      command=["scons", "-j", "20", "mode=debug", "bin"],
      workdir=Interpolate("build_%(src::branch)s/source"),
      description="compiling", descriptionSuffix="release bin"))

test_debug_factory.addStep(
    ShellCommand(
      command=["./integration.py", "-j", "20", "--mode", "debug"],
      workdir=Interpolate("build_%(src::branch)s/tests/integration"),
      description="testing", descriptionSuffix="integration"))

test_debug_factory.addStep(
    ShellCommand(
      command=["mv", "-f", Interpolate("../build_%(src::branch)s/tests/integration/ref"), Interpolate("ref_debug_%(src::branch)s_%(src::revision)s")],
      workdir="integration_results", description="saving", descriptionSuffix="integration"))

from buildbot.config import BuilderConfig

c['builders'] = []

#c['builders'].append(
    #BuilderConfig(name="build_release",
      #slavenames=["example-slave"],
      #factory=release_factory))

c['builders'].append(
    BuilderConfig(name="build_test",
      slavenames=["example-slave"],
      factory=test_factory))

c['builders'].append(
    BuilderConfig(name="build_test_debug",
      slavenames=["example-slave"],
      factory=test_debug_factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.mail import MailNotifier

mn = MailNotifier(fromaddr="fordas@uw.edu", sendToInterestedUsers=False, extraRecipients=['fordas@uw.edu'])
c["status"].append(mn)

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("dev","dev")]),
    gracefulShutdown = True,
    forceBuild = 'build_test', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)

c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "~asford/workspace/rosetta_Dev "
c['titleURL'] = "https://github.com/RosettaCommons/main"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://dig8:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
